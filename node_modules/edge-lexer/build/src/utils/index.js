"use strict";
/*
 * edge-lexer
 *
 * (c) Harminder Virk <virk@adonisjs.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLineAndColumn = exports.isEscapedMustache = exports.isSafeMustache = exports.isMustache = exports.isEscapedTag = exports.isTag = void 0;
const Contracts_1 = require("../Contracts");
/**
 * Returns true when token is a tag with a given name
 */
function isTag(token, name) {
    if (token.type === Contracts_1.TagTypes.TAG || token.type === Contracts_1.TagTypes.ETAG) {
        return name ? token.properties.name === name : true;
    }
    return false;
}
exports.isTag = isTag;
/**
 * Returns true when token is an escape tag with a given name
 */
function isEscapedTag(token, name) {
    if (token.type === Contracts_1.TagTypes.ETAG) {
        return name ? token.properties.name === name : true;
    }
    return false;
}
exports.isEscapedTag = isEscapedTag;
/**
 * Returns true when token.type is a mustache type
 */
function isMustache(token) {
    return (token.type === Contracts_1.MustacheTypes.EMUSTACHE ||
        token.type === Contracts_1.MustacheTypes.ESMUSTACHE ||
        token.type === Contracts_1.MustacheTypes.MUSTACHE ||
        token.type === Contracts_1.MustacheTypes.SMUSTACHE);
}
exports.isMustache = isMustache;
/**
 * Returns true when token.type is a safe mustache type
 */
function isSafeMustache(token) {
    return token.type === Contracts_1.MustacheTypes.ESMUSTACHE || token.type === Contracts_1.MustacheTypes.SMUSTACHE;
}
exports.isSafeMustache = isSafeMustache;
/**
 * Returns true when toke.type is an escaped mustache type
 */
function isEscapedMustache(token) {
    return token.type === Contracts_1.MustacheTypes.EMUSTACHE || token.type === Contracts_1.MustacheTypes.ESMUSTACHE;
}
exports.isEscapedMustache = isEscapedMustache;
/**
 * Returns line and column number for a given lexer token
 */
function getLineAndColumn(token) {
    if (token.type === 'newline' || token.type === 'raw') {
        return [token.line, 0];
    }
    return [token.loc.start.line, token.loc.start.col];
}
exports.getLineAndColumn = getLineAndColumn;
